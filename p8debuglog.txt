 gcc -g p8final.c -lm
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0xaf7: file p8final.c, line 67.
(gdb) r
Starting program: /home/runner/Test2Session2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p8final.c:67
67  {
(gdb) n
68    int n=input_n();
(gdb) s
input_n () at p8final.c:19
19  {
(gdb) n
21    printf("Enter the no. of sides of a polygon:\n");
(gdb) n
Enter the no. of sides of a polygon:
22    scanf("%d",&n);
(gdb) n
4
23    return n;
(gdb) n
24  }
(gdb) n
main () at p8final.c:70
70    input_polygon(n,&p);
(gdb) s
input_polygon (n=4, p=0x7ffdffb24240) at p8final.c:53
53    p->n=n;
(gdb) n
54    input_n_lines(p->n,p->l);
(gdb) s
input_n_lines (n=4, l=0x7ffdffb24244) at p8final.c:47
47  {
(gdb) n
48    for(int i=0;i<n;i++)
(gdb) n
49      l[i]=input_line();
(gdb) p i
$1 = 0
(gdb) s
input_line () at p8final.c:41
41    t.p1=input_point();
(gdb) s
input_point () at p8final.c:26
26  {
(gdb) n
28    printf("Enter the coordinates\n");
(gdb) n
Enter the coordinates
29    scanf("%f%f",&t.x,&t.y);
(gdb) n
0 0
30    return t;
(gdb) n
31  }
(gdb) n
input_line () at p8final.c:42
42    t.p2=input_point();
(gdb) s
input_point () at p8final.c:26
26  {
(gdb) n
28    printf("Enter the coordinates\n");
(gdb) n
Enter the coordinates
29    scanf("%f%f",&t.x,&t.y);
(gdb) n
0 3
30    return t;
(gdb) n
31  }
(gdb) n
input_line () at p8final.c:43
43    t.distance=dis(t.p1,t.p2);
(gdb) s
dis (p1=..., p2=...) at p8final.c:34
34    float distance=0.0;
(gdb) n
35    distance=sqrt(((p2.x-p1.x)*(p2.x-p1.x))+((p2.y-p1.y)*(p2.y-p1.y)));
(gdb) n
36    return distance;
(gdb) p distance
$2 = 3
(gdb) n
37  }
(gdb) n
input_line () at p8final.c:44
44    return t;
(gdb) n
45  }
(gdb) n
input_n_lines (n=4, l=0x7ffdffb24244) at p8final.c:48
48    for(int i=0;i<n;i++)
(gdb) n
49      l[i]=input_line();
(gdb) p i
$3 = 1
(gdb) s
input_line () at p8final.c:41
41    t.p1=input_point();
(gdb) s
input_point () at p8final.c:26
26  {
(gdb) n
28    printf("Enter the coordinates\n");
(gdb) n
Enter the coordinates
29    scanf("%f%f",&t.x,&t.y);
(gdb) n
0 3
30    return t;
(gdb) n
31  }
(gdb) n
input_line () at p8final.c:42
42    t.p2=input_point();
(gdb) s
input_point () at p8final.c:26
26  {
(gdb) n
28    printf("Enter the coordinates\n");
(gdb) n
Enter the coordinates
29    scanf("%f%f",&t.x,&t.y);
(gdb) n
3 3
30    return t;
(gdb) n
31  }
(gdb) n
input_line () at p8final.c:43
43    t.distance=dis(t.p1,t.p2);
(gdb) s
dis (p1=..., p2=...) at p8final.c:34
34    float distance=0.0;
(gdb) n
35    distance=sqrt(((p2.x-p1.x)*(p2.x-p1.x))+((p2.y-p1.y)*(p2.y-p1.y)));
(gdb) n
36    return distance;
(gdb) p distance
$4 = 3
(gdb) n
37  }
(gdb) n
input_line () at p8final.c:44
44    return t;
(gdb) n
45  }
(gdb) n
input_n_lines (n=4, l=0x7ffdffb24244) at p8final.c:48
48    for(int i=0;i<n;i++)
(gdb) n
49      l[i]=input_line();
(gdb) p i
$5 = 2
(gdb) s
input_line () at p8final.c:41
41    t.p1=input_point();
(gdb) s
input_point () at p8final.c:26
26  {
(gdb) n
28    printf("Enter the coordinates\n");
(gdb) n
Enter the coordinates
29    scanf("%f%f",&t.x,&t.y);
(gdb) n
3 3
30    return t;
(gdb) n
31  }
(gdb) n
input_line () at p8final.c:42
42    t.p2=input_point();
(gdb) s
input_point () at p8final.c:26
26  {
(gdb) n
28    printf("Enter the coordinates\n");
(gdb) n
Enter the coordinates
29    scanf("%f%f",&t.x,&t.y);
(gdb) n
3 0
30    return t;
(gdb) n
31  }
(gdb) n
input_line () at p8final.c:43
43    t.distance=dis(t.p1,t.p2);
(gdb) s
dis (p1=..., p2=...) at p8final.c:34
34    float distance=0.0;
(gdb) n
35    distance=sqrt(((p2.x-p1.x)*(p2.x-p1.x))+((p2.y-p1.y)*(p2.y-p1.y)));
(gdb) n
36    return distance;
(gdb) p distance
$6 = 3
(gdb) n
37  }
(gdb) n
input_line () at p8final.c:44
44    return t;
(gdb) n
45  }
(gdb) n
input_n_lines (n=4, l=0x7ffdffb24244) at p8final.c:48
48    for(int i=0;i<n;i++)
(gdb) n
49      l[i]=input_line();
(gdb) p i
$7 = 3
(gdb) s
input_line () at p8final.c:41
41    t.p1=input_point();
(gdb) s
input_point () at p8final.c:26
26  {
(gdb) n
28    printf("Enter the coordinates\n");
(gdb) n
Enter the coordinates
29    scanf("%f%f",&t.x,&t.y);
(gdb) n
3 0
30    return t;
(gdb) n
31  }
(gdb) n
input_line () at p8final.c:42
42    t.p2=input_point();
(gdb) s
input_point () at p8final.c:26
26  {
(gdb) n
28    printf("Enter the coordinates\n");
(gdb) n
Enter the coordinates
29    scanf("%f%f",&t.x,&t.y);
(gdb) n
0 0
30    return t;
(gdb) n
31  }
(gdb) n
input_line () at p8final.c:43
43    t.distance=dis(t.p1,t.p2);
(gdb) s
dis (p1=..., p2=...) at p8final.c:34
34    float distance=0.0;
(gdb) n
35    distance=sqrt(((p2.x-p1.x)*(p2.x-p1.x))+((p2.y-p1.y)*(p2.y-p1.y)));
(gdb) n
36    return distance;
(gdb) p distance
$8 = 3
(gdb) n
37  }
(gdb) n
input_line () at p8final.c:44
44    return t;
(gdb) n
45  }
(gdb) n
input_n_lines (n=4, l=0x7ffdffb24244) at p8final.c:48
48    for(int i=0;i<n;i++)
(gdb) n
50  }
(gdb) n
input_polygon (n=4, p=0x7ffdffb24240) at p8final.c:55
55    p->perimeter=0.0;
(gdb) n
56  }
(gdb) n
main () at p8final.c:71
71    find_perimeter(&p);
(gdb) s
find_perimeter (p=0x7ffdffb24240) at p8final.c:59
59    for(int i=0;i<p->n;i++)
(gdb) n
60        p->perimeter+=p->l[i].distance;
(gdb) n
59    for(int i=0;i<p->n;i++)
(gdb) p p->perimeter
$9 = 3
(gdb) n
60        p->perimeter+=p->l[i].distance;
(gdb) p i
$10 = 1
(gdb) n
59    for(int i=0;i<p->n;i++)
(gdb) p p->perimeter
$11 = 6
(gdb) n
60        p->perimeter+=p->l[i].distance;
(gdb) p i
$12 = 2
(gdb) n
59    for(int i=0;i<p->n;i++)
(gdb) p p->perimeter
$13 = 9
(gdb) n
60        p->perimeter+=p->l[i].distance;
(gdb) p i
$14 = 3
(gdb) n
59    for(int i=0;i<p->n;i++)
(gdb) p p->perimeter
$15 = 12
(gdb) n
61  }
(gdb) n
main () at p8final.c:72
72    output(p);
(gdb) s
output (p=...) at p8final.c:64
64      printf("The perimeter of the polygon with side %d is %f\n",p.n,p.perimeter);
(gdb) n
The perimeter of the polygon with side 4 is 12.000000
65  }
(gdb) n
main () at p8final.c:73
73    return 0;
(gdb) n
74  }
(gdb) q
A debugging session is active.

    Inferior 1 [process 3167] will be killed.

Quit anyway? (y or n) y
